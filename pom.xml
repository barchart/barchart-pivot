<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>com.barchart.base</groupId>
		<artifactId>barchart-archon</artifactId>
		<version>2.4.1</version>
	</parent>

	<groupId>com.barchart.pivot</groupId>
	<artifactId>barchart-pivot</artifactId>
	<version>2.0.2-build001-SNAPSHOT</version>
	<packaging>pom</packaging>

	<scm>
		<url>https://github.com/barchart/barchart-pivot</url>
		<connection>scm:git:git://github.com/barchart/barchart-pivot.git</connection>
		<developerConnection>scm:git:ssh://git@github.com/barchart/barchart-pivot.git</developerConnection>
	</scm>

	<modules>

		<!-- Required Apache Pivot modules. -->
		<module>pivot-core</module>
		<module>pivot-core-web</module>
		<module>pivot-core-web-server</module>
		<module>pivot-wtk</module>
		<module>pivot-wtk-skin-terra</module>
		<module>pivot-wtk-charts</module>

		<!-- Optional Apache Pivot modules. -->
		<!-- <module>pivot-demos</module> -->
		<!-- <module>pivot-demos-server</module> -->
		<!-- <module>pivot-examples</module> -->
		<!-- <module>pivot-tutorials</module> -->
		<!-- <module>pivot-tutorials-server</module> -->

	</modules>

	<properties>

		<!-- Apache Pivot source remote URL. -->
		<repo-url>http://svn.apache.org/repos/asf/pivot/trunk</repo-url>
		<!-- SCM read-only connection to Apache source. -->
		<repo-connection>scm:svn:${repo-url}</repo-connection>

		<!-- Apache pivot module provided by each module pom.xml. -->
		<repo-module />

		<!-- Checkout folder name -->
		<checkoutFolder>target/checkout-apache-pivot</checkoutFolder>

		<!-- Local copy of Apache Pivot source after check out step. -->
		<repodir>${basedir}/${checkoutFolder}</repodir>

		<!-- Apache Pivot convention for main java folders. -->
		<module-src-main-java>src</module-src-main-java>
		<!-- Apache Pivot convention for test java folders. -->
		<module-src-test-java>testing</module-src-test-java>

	</properties>


	<build>

		<sourceDirectory>${module-src-main-java}</sourceDirectory>

		<!-- Pivot view resources are stored with code. -->
		<resources>
			<resource>
				<directory>${module-src-main-java}</directory>
				<includes>
					<include>**/*</include>
				</includes>
				<excludes>
					<exclude>**/*.java</exclude>
					<exclude>**/*.scala</exclude>
				</excludes>
			</resource>
		</resources>

		<pluginManagement>
			<plugins>

				<!-- Activate all life cycle profiles during release. -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-release-plugin</artifactId>
					<configuration>
						<arguments>--activate-profiles clean,update,patch,release</arguments>
					</configuration>
				</plugin>

			</plugins>
		</pluginManagement>

		<plugins>

			<!-- Always generate sources. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
				<executions>
					<execution>
						<goals>
							<goal>jar-no-fork</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

		</plugins>

	</build>

	<profiles>

		<!-- Create patch of difference between Apache and Barchart. -->
		<!-- Must have command line git available on local O/S. -->
		<profile>
			<id>difference</id>
			<build>

				<plugins>

					<!-- Use ant as cross-platform launcher for git command line. -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<executions>
							<execution>
								<id>patch-create</id>
								<phase>generate-sources</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target>

										<!-- Execute git command line. -->
										<exec executable="git" resultproperty="result"
											failonerror="false" output="${basedir}/patch/current.patch"
											error="${basedir}/target/patch-error.txt">

											<!-- Git diff command. -->
											<arg value="diff" />

											<!-- Encode file names relative to ${basedir} -->
											<arg value="--relative" />

											<!-- Force folder-to-folder diff mode. -->
											<arg value="--no-index" />

											<!-- Arguments separator -->
											<arg value="--" />

											<!-- Local unmodified checkout of remote Apache source. -->
											<arg value="${checkoutFolder}/src/" />

											<!-- Local developer-modified working copy of Apache source. -->
											<arg value="src/" />

										</exec>

										<delete>
											<fileset dir="${basedir}/patch">
												<size value="0" when="equal" />
											</fileset>
										</delete>

									</target>
								</configuration>
							</execution>
						</executions>
					</plugin>

				</plugins>
			</build>
		</profile>

		<!-- Remove local developer copy of Apache sources. -->
		<profile>
			<id>clean</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-clean-plugin</artifactId>
						<executions>
							<execution>
								<id>clean-apache</id>
								<phase>clean</phase>
								<goals>
									<goal>clean</goal>
								</goals>
								<configuration>
									<filesets>
										<fileset>
											<directory>${basedir}/src</directory>
											<includes>
												<include>**/*</include>
											</includes>
										</fileset>
										<fileset>
											<directory>${basedir}/test</directory>
											<includes>
												<include>**/*</include>
											</includes>
										</fileset>
									</filesets>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!-- Make local checkout of remote Apache source as well as local developer 
			working copy. -->
		<profile>

			<id>update</id>

			<build>

				<plugins>

					<!-- Download from Apache. -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-scm-plugin</artifactId>
						<executions>
							<execution>
								<id>checkout-apache</id>
								<phase>generate-sources</phase>
								<goals>
									<goal>checkout</goal>
								</goals>
								<configuration>
									<connectionUrl>${repo-connection}/${repo-module}</connectionUrl>
									<checkoutDirectory>${repodir}</checkoutDirectory>
								</configuration>
							</execution>
						</executions>
					</plugin>

					<!-- Remove SVN metadata from checkout directory. -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-clean-plugin</artifactId>
						<executions>
							<execution>
								<id>remove-apache</id>
								<phase>generate-sources</phase>
								<goals>
									<goal>clean</goal>
								</goals>
								<configuration>
									<excludeDefaultDirectories>true</excludeDefaultDirectories>
									<filesets>
										<fileset>
											<directory>${repodir}</directory>
											<includes>
												<include>**/.svn/**</include>
											</includes>
										</fileset>
									</filesets>
								</configuration>
							</execution>
						</executions>
					</plugin>

					<!-- Copy main and test source folders to working copy. -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-resources-plugin</artifactId>
						<configuration>
							<encoding>UTF-8</encoding>
						</configuration>
						<executions>
							<execution>
								<id>copy-src-main-java</id>
								<phase>generate-sources</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
									<resources>
										<resource>
											<directory>${repodir}/${module-src-main-java}</directory>
											<filtering>false</filtering>
										</resource>
									</resources>
									<overwrite>true</overwrite>
									<outputDirectory>${basedir}/${module-src-main-java}</outputDirectory>
								</configuration>
							</execution>
							<execution>
								<id>copy-src-test-java</id>
								<phase>generate-sources</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
									<resources>
										<resource>
											<directory>${repodir}/${module-src-test-java}</directory>
											<filtering>false</filtering>
										</resource>
									</resources>
									<overwrite>true</overwrite>
									<outputDirectory>${basedir}/${module-src-test-java}</outputDirectory>
								</configuration>
							</execution>
						</executions>
					</plugin>

				</plugins>

			</build>

		</profile>

		<!-- Apply patch files to working copy. -->
		<!-- Must have command line git available on local O/S. -->
		<profile>
			<id>patch</id>
			<build>
				<plugins>

					<!-- Use ant as cross-platform launcher for git command line. -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<executions>
							<execution>
								<id>patch-apply</id>
								<phase>process-sources</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target>

										<!-- Find all *.patch files. -->
										<fileset id="patch.fileSet" dir="${basedir}">
											<include name="patch/*.patch" />
										</fileset>

										<!-- Convert discoverd patch files to a one-line property. -->
										<property name="patch.fileProp" refid="patch.fileSet" />

										<!-- Replace class path separator with a space separator. -->
										<loadresource property="patch.fileArgs">
											<propertyresource name="patch.fileProp" />
											<filterchain>
												<tokenfilter>
													<replacestring from=";" to=" " />
												</tokenfilter>
											</filterchain>
										</loadresource>

										<!-- Execute git to apply patch to working copy. -->
										<exec executable="git" failonerror="true" dir="${basedir}">
											<arg line="apply --verbose ${patch.fileArgs}" />
										</exec>

									</target>
								</configuration>
							</execution>
						</executions>
					</plugin>

				</plugins>
			</build>
		</profile>

	</profiles>

</project>
